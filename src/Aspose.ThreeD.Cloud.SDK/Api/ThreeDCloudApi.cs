/* 
 * Aspose.ThreeD Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.ThreeD.Cloud.SDK.Client;
using Aspose.ThreeD.Cloud.SDK.Model;

namespace Aspose.ThreeD.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IThreeDCloudApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete nodes from scene,nodes are addressed by Object Addressing Path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="objectaddressingpath">The object addressing path.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DeleteNodes (string name, string objectaddressingpath, string folder = null, string storage = null);

        /// <summary>
        /// Delete nodes from scene,nodes are addressed by Object Addressing Path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="objectaddressingpath">The object addressing path.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DeleteNodesWithHttpInfo (string name, string objectaddressingpath, string folder = null, string storage = null);
        /// <summary>
        /// Convert file on server to other formats with fileformat parameter             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="newformat">The format of the new file.</param>
        /// <param name="newfilename">The name of the new file.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false. (optional, default to false)</param>
        /// <param name="storage">The storage type. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostConvertByFormat (string name, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Convert file on server to other formats with fileformat parameter             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="newformat">The format of the new file.</param>
        /// <param name="newfilename">The name of the new file.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false. (optional, default to false)</param>
        /// <param name="storage">The storage type. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostConvertByFormatWithHttpInfo (string name, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);
        /// <summary>
        /// Convert file on server to other formats with saveOption parameter             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="saveOptions">The saveOptions to save the file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostConvertByOpt (string name, SaveOptions saveOptions, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Convert file on server to other formats with saveOption parameter             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="saveOptions">The saveOptions to save the file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostConvertByOptWithHttpInfo (string name, SaveOptions saveOptions, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);
        /// <summary>
        /// Create new file with specified format.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the new file.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostCreate (string format);

        /// <summary>
        /// Create new file with specified format.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the new file.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostCreateWithHttpInfo (string format);
        /// <summary>
        /// Parametric Modeling�� Create a Entity with size and located in ...
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="modeldata">ModelData struct.</param>
        /// <param name="newformat">new format of the source file. (optional)</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostModel (string name, ModelData modeldata, string newformat = null, string folder = null, string storage = null);

        /// <summary>
        /// Parametric Modeling�� Create a Entity with size and located in ...
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="modeldata">ModelData struct.</param>
        /// <param name="newformat">new format of the source file. (optional)</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostModelWithHttpInfo (string name, ModelData modeldata, string newformat = null, string folder = null, string storage = null);
        /// <summary>
        /// Extract raw data(without any modification) from a password protected PDF file             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for generated raw date</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostPdfRawData (string name, string multifileprefix, string password = null, string folder = null, string storage = null);

        /// <summary>
        /// Extract raw data(without any modification) from a password protected PDF file             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for generated raw date</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostPdfRawDataWithHttpInfo (string name, string multifileprefix, string password = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert part of the file into different format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file</param>
        /// <param name="objectaddressingpath">The object addressing path</param>
        /// <param name="newformat">The format of the new file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostSaveAsPart (string name, string objectaddressingpath, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Convert part of the file into different format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file</param>
        /// <param name="objectaddressingpath">The object addressing path</param>
        /// <param name="newformat">The format of the new file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostSaveAsPartWithHttpInfo (string name, string objectaddressingpath, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);
        /// <summary>
        /// Extract and save in different format             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for extracted scene</param>
        /// <param name="newformat">The format of new file (optional)</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostSceneToFile (string name, string multifileprefix, string newformat = null, string password = null, string folder = null, string storage = null);

        /// <summary>
        /// Extract and save in different format             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for extracted scene</param>
        /// <param name="newformat">The format of new file (optional)</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostSceneToFileWithHttpInfo (string name, string multifileprefix, string newformat = null, string password = null, string folder = null, string storage = null);
        /// <summary>
        /// Triangulate whole file and save to the different file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="newfilename">The new file&#39;s mame</param>
        /// <param name="newformat">The new file&#39;s format</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostTriangulateNew (string name, string newfilename, string newformat, string folder = null, string storage = null);

        /// <summary>
        /// Triangulate whole file and save to the different file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="newfilename">The new file&#39;s mame</param>
        /// <param name="newformat">The new file&#39;s format</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostTriangulateNewWithHttpInfo (string name, string newfilename, string newformat, string folder = null, string storage = null);
        /// <summary>
        /// Triangulate whole file and save to original file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostTriangulateOriginal (string name, string folder = null, string storage = null);

        /// <summary>
        /// Triangulate whole file and save to original file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostTriangulateOriginalWithHttpInfo (string name, string folder = null, string storage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete nodes from scene,nodes are addressed by Object Addressing Path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="objectaddressingpath">The object addressing path.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DeleteNodesAsync (string name, string objectaddressingpath, string folder = null, string storage = null);

        /// <summary>
        /// Delete nodes from scene,nodes are addressed by Object Addressing Path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="objectaddressingpath">The object addressing path.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DeleteNodesAsyncWithHttpInfo (string name, string objectaddressingpath, string folder = null, string storage = null);
        /// <summary>
        /// Convert file on server to other formats with fileformat parameter             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="newformat">The format of the new file.</param>
        /// <param name="newfilename">The name of the new file.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false. (optional, default to false)</param>
        /// <param name="storage">The storage type. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostConvertByFormatAsync (string name, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Convert file on server to other formats with fileformat parameter             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="newformat">The format of the new file.</param>
        /// <param name="newfilename">The name of the new file.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false. (optional, default to false)</param>
        /// <param name="storage">The storage type. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostConvertByFormatAsyncWithHttpInfo (string name, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);
        /// <summary>
        /// Convert file on server to other formats with saveOption parameter             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="saveOptions">The saveOptions to save the file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostConvertByOptAsync (string name, SaveOptions saveOptions, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Convert file on server to other formats with saveOption parameter             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="saveOptions">The saveOptions to save the file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostConvertByOptAsyncWithHttpInfo (string name, SaveOptions saveOptions, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);
        /// <summary>
        /// Create new file with specified format.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the new file.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostCreateAsync (string format);

        /// <summary>
        /// Create new file with specified format.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the new file.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostCreateAsyncWithHttpInfo (string format);
        /// <summary>
        /// Parametric Modeling�� Create a Entity with size and located in ...
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="modeldata">ModelData struct.</param>
        /// <param name="newformat">new format of the source file. (optional)</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostModelAsync (string name, ModelData modeldata, string newformat = null, string folder = null, string storage = null);

        /// <summary>
        /// Parametric Modeling�� Create a Entity with size and located in ...
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="modeldata">ModelData struct.</param>
        /// <param name="newformat">new format of the source file. (optional)</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostModelAsyncWithHttpInfo (string name, ModelData modeldata, string newformat = null, string folder = null, string storage = null);
        /// <summary>
        /// Extract raw data(without any modification) from a password protected PDF file             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for generated raw date</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostPdfRawDataAsync (string name, string multifileprefix, string password = null, string folder = null, string storage = null);

        /// <summary>
        /// Extract raw data(without any modification) from a password protected PDF file             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for generated raw date</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostPdfRawDataAsyncWithHttpInfo (string name, string multifileprefix, string password = null, string folder = null, string storage = null);
        /// <summary>
        /// Convert part of the file into different format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file</param>
        /// <param name="objectaddressingpath">The object addressing path</param>
        /// <param name="newformat">The format of the new file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostSaveAsPartAsync (string name, string objectaddressingpath, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);

        /// <summary>
        /// Convert part of the file into different format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file</param>
        /// <param name="objectaddressingpath">The object addressing path</param>
        /// <param name="newformat">The format of the new file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostSaveAsPartAsyncWithHttpInfo (string name, string objectaddressingpath, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null);
        /// <summary>
        /// Extract and save in different format             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for extracted scene</param>
        /// <param name="newformat">The format of new file (optional)</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostSceneToFileAsync (string name, string multifileprefix, string newformat = null, string password = null, string folder = null, string storage = null);

        /// <summary>
        /// Extract and save in different format             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for extracted scene</param>
        /// <param name="newformat">The format of new file (optional)</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostSceneToFileAsyncWithHttpInfo (string name, string multifileprefix, string newformat = null, string password = null, string folder = null, string storage = null);
        /// <summary>
        /// Triangulate whole file and save to the different file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="newfilename">The new file&#39;s mame</param>
        /// <param name="newformat">The new file&#39;s format</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostTriangulateNewAsync (string name, string newfilename, string newformat, string folder = null, string storage = null);

        /// <summary>
        /// Triangulate whole file and save to the different file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="newfilename">The new file&#39;s mame</param>
        /// <param name="newformat">The new file&#39;s format</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostTriangulateNewAsyncWithHttpInfo (string name, string newfilename, string newformat, string folder = null, string storage = null);
        /// <summary>
        /// Triangulate whole file and save to original file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostTriangulateOriginalAsync (string name, string folder = null, string storage = null);

        /// <summary>
        /// Triangulate whole file and save to original file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostTriangulateOriginalAsyncWithHttpInfo (string name, string folder = null, string storage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ThreeDCloudApi : IThreeDCloudApi
    {
        private Aspose.ThreeD.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDCloudApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ThreeDCloudApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.ThreeD.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="ThreeDCloudApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ThreeDCloudApi(String basePath, String accesstoken)
        {
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + accesstoken);
            this.Configuration = new Configuration(new ApiClient(basePath),headerParameters);

            ExceptionFactory = Aspose.ThreeD.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDCloudApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ThreeDCloudApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.ThreeD.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="ThreeDCloudApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ThreeDCloudApi(String grantType,String appSID,String appKey)
        {
            OAuthApi oauth2 = new OAuthApi("https://api.aspose.cloud");
            var oauth2response = oauth2.OAuthPost(grantType, appSID, appKey);
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + oauth2response.AccessToken);
            this.Configuration =  new Configuration(new ApiClient(), headerParameters);
            ExceptionFactory = Aspose.ThreeD.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.ThreeD.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete nodes from scene,nodes are addressed by Object Addressing Path 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="objectaddressingpath">The object addressing path.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DeleteNodes (string name, string objectaddressingpath, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DeleteNodesWithHttpInfo(name, objectaddressingpath, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete nodes from scene,nodes are addressed by Object Addressing Path 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="objectaddressingpath">The object addressing path.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DeleteNodesWithHttpInfo (string name, string objectaddressingpath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->DeleteNodes");
            // verify the required parameter 'objectaddressingpath' is set
            if (objectaddressingpath == null)
                throw new ApiException(400, "Missing required parameter 'objectaddressingpath' when calling ThreeDCloudApi->DeleteNodes");

            var localVarPath = "3d/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (objectaddressingpath != null) localVarQueryParams.Add("objectaddressingpath", Configuration.ApiClient.ParameterToString(objectaddressingpath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Delete nodes from scene,nodes are addressed by Object Addressing Path 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="objectaddressingpath">The object addressing path.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DeleteNodesAsync (string name, string objectaddressingpath, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DeleteNodesAsyncWithHttpInfo(name, objectaddressingpath, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete nodes from scene,nodes are addressed by Object Addressing Path 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="objectaddressingpath">The object addressing path.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DeleteNodesAsyncWithHttpInfo (string name, string objectaddressingpath, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->DeleteNodes");
            // verify the required parameter 'objectaddressingpath' is set
            if (objectaddressingpath == null)
                throw new ApiException(400, "Missing required parameter 'objectaddressingpath' when calling ThreeDCloudApi->DeleteNodes");

            var localVarPath = "3d/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (objectaddressingpath != null) localVarQueryParams.Add("objectaddressingpath", Configuration.ApiClient.ParameterToString(objectaddressingpath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert file on server to other formats with fileformat parameter              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="newformat">The format of the new file.</param>
        /// <param name="newfilename">The name of the new file.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false. (optional, default to false)</param>
        /// <param name="storage">The storage type. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostConvertByFormat (string name, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PostConvertByFormatWithHttpInfo(name, newformat, newfilename, folder, isOverwrite, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert file on server to other formats with fileformat parameter              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="newformat">The format of the new file.</param>
        /// <param name="newfilename">The name of the new file.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false. (optional, default to false)</param>
        /// <param name="storage">The storage type. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PostConvertByFormatWithHttpInfo (string name, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostConvertByFormat");
            // verify the required parameter 'newformat' is set
            if (newformat == null)
                throw new ApiException(400, "Missing required parameter 'newformat' when calling ThreeDCloudApi->PostConvertByFormat");
            // verify the required parameter 'newfilename' is set
            if (newfilename == null)
                throw new ApiException(400, "Missing required parameter 'newfilename' when calling ThreeDCloudApi->PostConvertByFormat");

            var localVarPath = "3d/saveas/newformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (newformat != null) localVarQueryParams.Add("newformat", Configuration.ApiClient.ParameterToString(newformat)); // query parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConvertByFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert file on server to other formats with fileformat parameter              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="newformat">The format of the new file.</param>
        /// <param name="newfilename">The name of the new file.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false. (optional, default to false)</param>
        /// <param name="storage">The storage type. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostConvertByFormatAsync (string name, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostConvertByFormatAsyncWithHttpInfo(name, newformat, newfilename, folder, isOverwrite, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert file on server to other formats with fileformat parameter              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="newformat">The format of the new file.</param>
        /// <param name="newfilename">The name of the new file.</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false. (optional, default to false)</param>
        /// <param name="storage">The storage type. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostConvertByFormatAsyncWithHttpInfo (string name, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostConvertByFormat");
            // verify the required parameter 'newformat' is set
            if (newformat == null)
                throw new ApiException(400, "Missing required parameter 'newformat' when calling ThreeDCloudApi->PostConvertByFormat");
            // verify the required parameter 'newfilename' is set
            if (newfilename == null)
                throw new ApiException(400, "Missing required parameter 'newfilename' when calling ThreeDCloudApi->PostConvertByFormat");

            var localVarPath = "3d/saveas/newformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (newformat != null) localVarQueryParams.Add("newformat", Configuration.ApiClient.ParameterToString(newformat)); // query parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConvertByFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert file on server to other formats with saveOption parameter              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="saveOptions">The saveOptions to save the file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostConvertByOpt (string name, SaveOptions saveOptions, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PostConvertByOptWithHttpInfo(name, saveOptions, newfilename, folder, isOverwrite, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert file on server to other formats with saveOption parameter              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="saveOptions">The saveOptions to save the file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PostConvertByOptWithHttpInfo (string name, SaveOptions saveOptions, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostConvertByOpt");
            // verify the required parameter 'saveOptions' is set
            if (saveOptions == null)
                throw new ApiException(400, "Missing required parameter 'saveOptions' when calling ThreeDCloudApi->PostConvertByOpt");
            // verify the required parameter 'newfilename' is set
            if (newfilename == null)
                throw new ApiException(400, "Missing required parameter 'newfilename' when calling ThreeDCloudApi->PostConvertByOpt");

            var localVarPath = "3d/saveas/saveoption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (saveOptions != null && saveOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveOptions; // byte array
            }

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConvertByOpt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert file on server to other formats with saveOption parameter              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="saveOptions">The saveOptions to save the file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostConvertByOptAsync (string name, SaveOptions saveOptions, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostConvertByOptAsyncWithHttpInfo(name, saveOptions, newfilename, folder, isOverwrite, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert file on server to other formats with saveOption parameter              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="saveOptions">The saveOptions to save the file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostConvertByOptAsyncWithHttpInfo (string name, SaveOptions saveOptions, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostConvertByOpt");
            // verify the required parameter 'saveOptions' is set
            if (saveOptions == null)
                throw new ApiException(400, "Missing required parameter 'saveOptions' when calling ThreeDCloudApi->PostConvertByOpt");
            // verify the required parameter 'newfilename' is set
            if (newfilename == null)
                throw new ApiException(400, "Missing required parameter 'newfilename' when calling ThreeDCloudApi->PostConvertByOpt");

            var localVarPath = "3d/saveas/saveoption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (saveOptions != null && saveOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveOptions; // byte array
            }

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConvertByOpt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Create new file with specified format.              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the new file.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostCreate (string format)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PostCreateWithHttpInfo(format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new file with specified format.              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the new file.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PostCreateWithHttpInfo (string format)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ThreeDCloudApi->PostCreate");

            var localVarPath = "3d/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Create new file with specified format.              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the new file.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostCreateAsync (string format)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostCreateAsyncWithHttpInfo(format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new file with specified format.              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the new file.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostCreateAsyncWithHttpInfo (string format)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ThreeDCloudApi->PostCreate");

            var localVarPath = "3d/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Parametric Modeling�� Create a Entity with size and located in ... 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="modeldata">ModelData struct.</param>
        /// <param name="newformat">new format of the source file. (optional)</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostModel (string name, ModelData modeldata, string newformat = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PostModelWithHttpInfo(name, modeldata, newformat, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Parametric Modeling�� Create a Entity with size and located in ... 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="modeldata">ModelData struct.</param>
        /// <param name="newformat">new format of the source file. (optional)</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PostModelWithHttpInfo (string name, ModelData modeldata, string newformat = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostModel");
            // verify the required parameter 'modeldata' is set
            if (modeldata == null)
                throw new ApiException(400, "Missing required parameter 'modeldata' when calling ThreeDCloudApi->PostModel");

            var localVarPath = "3d/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (newformat != null) localVarQueryParams.Add("newformat", Configuration.ApiClient.ParameterToString(newformat)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (modeldata != null && modeldata.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(modeldata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modeldata; // byte array
            }

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Parametric Modeling�� Create a Entity with size and located in ... 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="modeldata">ModelData struct.</param>
        /// <param name="newformat">new format of the source file. (optional)</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostModelAsync (string name, ModelData modeldata, string newformat = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostModelAsyncWithHttpInfo(name, modeldata, newformat, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Parametric Modeling�� Create a Entity with size and located in ... 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file.</param>
        /// <param name="modeldata">ModelData struct.</param>
        /// <param name="newformat">new format of the source file. (optional)</param>
        /// <param name="folder">The folder of the source file. (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostModelAsyncWithHttpInfo (string name, ModelData modeldata, string newformat = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostModel");
            // verify the required parameter 'modeldata' is set
            if (modeldata == null)
                throw new ApiException(400, "Missing required parameter 'modeldata' when calling ThreeDCloudApi->PostModel");

            var localVarPath = "3d/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (newformat != null) localVarQueryParams.Add("newformat", Configuration.ApiClient.ParameterToString(newformat)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (modeldata != null && modeldata.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(modeldata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modeldata; // byte array
            }

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract raw data(without any modification) from a password protected PDF file              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for generated raw date</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostPdfRawData (string name, string multifileprefix, string password = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PostPdfRawDataWithHttpInfo(name, multifileprefix, password, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract raw data(without any modification) from a password protected PDF file              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for generated raw date</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PostPdfRawDataWithHttpInfo (string name, string multifileprefix, string password = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostPdfRawData");
            // verify the required parameter 'multifileprefix' is set
            if (multifileprefix == null)
                throw new ApiException(400, "Missing required parameter 'multifileprefix' when calling ThreeDCloudApi->PostPdfRawData");

            var localVarPath = "3d/extract/rawdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (multifileprefix != null) localVarQueryParams.Add("multifileprefix", Configuration.ApiClient.ParameterToString(multifileprefix)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPdfRawData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract raw data(without any modification) from a password protected PDF file              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for generated raw date</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostPdfRawDataAsync (string name, string multifileprefix, string password = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostPdfRawDataAsyncWithHttpInfo(name, multifileprefix, password, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract raw data(without any modification) from a password protected PDF file              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for generated raw date</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostPdfRawDataAsyncWithHttpInfo (string name, string multifileprefix, string password = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostPdfRawData");
            // verify the required parameter 'multifileprefix' is set
            if (multifileprefix == null)
                throw new ApiException(400, "Missing required parameter 'multifileprefix' when calling ThreeDCloudApi->PostPdfRawData");

            var localVarPath = "3d/extract/rawdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (multifileprefix != null) localVarQueryParams.Add("multifileprefix", Configuration.ApiClient.ParameterToString(multifileprefix)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPdfRawData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert part of the file into different format 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file</param>
        /// <param name="objectaddressingpath">The object addressing path</param>
        /// <param name="newformat">The format of the new file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostSaveAsPart (string name, string objectaddressingpath, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PostSaveAsPartWithHttpInfo(name, objectaddressingpath, newformat, newfilename, folder, isOverwrite, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert part of the file into different format 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file</param>
        /// <param name="objectaddressingpath">The object addressing path</param>
        /// <param name="newformat">The format of the new file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PostSaveAsPartWithHttpInfo (string name, string objectaddressingpath, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostSaveAsPart");
            // verify the required parameter 'objectaddressingpath' is set
            if (objectaddressingpath == null)
                throw new ApiException(400, "Missing required parameter 'objectaddressingpath' when calling ThreeDCloudApi->PostSaveAsPart");
            // verify the required parameter 'newformat' is set
            if (newformat == null)
                throw new ApiException(400, "Missing required parameter 'newformat' when calling ThreeDCloudApi->PostSaveAsPart");
            // verify the required parameter 'newfilename' is set
            if (newfilename == null)
                throw new ApiException(400, "Missing required parameter 'newfilename' when calling ThreeDCloudApi->PostSaveAsPart");

            var localVarPath = "3d/saveas/part";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (objectaddressingpath != null) localVarQueryParams.Add("objectaddressingpath", Configuration.ApiClient.ParameterToString(objectaddressingpath)); // query parameter
            if (newformat != null) localVarQueryParams.Add("newformat", Configuration.ApiClient.ParameterToString(newformat)); // query parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSaveAsPart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert part of the file into different format 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file</param>
        /// <param name="objectaddressingpath">The object addressing path</param>
        /// <param name="newformat">The format of the new file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostSaveAsPartAsync (string name, string objectaddressingpath, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostSaveAsPartAsyncWithHttpInfo(name, objectaddressingpath, newformat, newfilename, folder, isOverwrite, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert part of the file into different format 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the source file</param>
        /// <param name="objectaddressingpath">The object addressing path</param>
        /// <param name="newformat">The format of the new file</param>
        /// <param name="newfilename">The name of the new file</param>
        /// <param name="folder">The folder of the source file (optional)</param>
        /// <param name="isOverwrite">Overwrite the source file? true or false (optional, default to false)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostSaveAsPartAsyncWithHttpInfo (string name, string objectaddressingpath, string newformat, string newfilename, string folder = null, bool? isOverwrite = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostSaveAsPart");
            // verify the required parameter 'objectaddressingpath' is set
            if (objectaddressingpath == null)
                throw new ApiException(400, "Missing required parameter 'objectaddressingpath' when calling ThreeDCloudApi->PostSaveAsPart");
            // verify the required parameter 'newformat' is set
            if (newformat == null)
                throw new ApiException(400, "Missing required parameter 'newformat' when calling ThreeDCloudApi->PostSaveAsPart");
            // verify the required parameter 'newfilename' is set
            if (newfilename == null)
                throw new ApiException(400, "Missing required parameter 'newfilename' when calling ThreeDCloudApi->PostSaveAsPart");

            var localVarPath = "3d/saveas/part";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (objectaddressingpath != null) localVarQueryParams.Add("objectaddressingpath", Configuration.ApiClient.ParameterToString(objectaddressingpath)); // query parameter
            if (newformat != null) localVarQueryParams.Add("newformat", Configuration.ApiClient.ParameterToString(newformat)); // query parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (isOverwrite != null) localVarQueryParams.Add("IsOverwrite", Configuration.ApiClient.ParameterToString(isOverwrite)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSaveAsPart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract and save in different format              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for extracted scene</param>
        /// <param name="newformat">The format of new file (optional)</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostSceneToFile (string name, string multifileprefix, string newformat = null, string password = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PostSceneToFileWithHttpInfo(name, multifileprefix, newformat, password, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract and save in different format              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for extracted scene</param>
        /// <param name="newformat">The format of new file (optional)</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PostSceneToFileWithHttpInfo (string name, string multifileprefix, string newformat = null, string password = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostSceneToFile");
            // verify the required parameter 'multifileprefix' is set
            if (multifileprefix == null)
                throw new ApiException(400, "Missing required parameter 'multifileprefix' when calling ThreeDCloudApi->PostSceneToFile");

            var localVarPath = "3d/extract/scene";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (multifileprefix != null) localVarQueryParams.Add("multifileprefix", Configuration.ApiClient.ParameterToString(multifileprefix)); // query parameter
            if (newformat != null) localVarQueryParams.Add("newformat", Configuration.ApiClient.ParameterToString(newformat)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSceneToFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Extract and save in different format              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for extracted scene</param>
        /// <param name="newformat">The format of new file (optional)</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostSceneToFileAsync (string name, string multifileprefix, string newformat = null, string password = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostSceneToFileAsyncWithHttpInfo(name, multifileprefix, newformat, password, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract and save in different format              
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The PDF file&#39;s mame</param>
        /// <param name="multifileprefix">The file name for extracted scene</param>
        /// <param name="newformat">The format of new file (optional)</param>
        /// <param name="password">The password to open the PDF (optional)</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostSceneToFileAsyncWithHttpInfo (string name, string multifileprefix, string newformat = null, string password = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostSceneToFile");
            // verify the required parameter 'multifileprefix' is set
            if (multifileprefix == null)
                throw new ApiException(400, "Missing required parameter 'multifileprefix' when calling ThreeDCloudApi->PostSceneToFile");

            var localVarPath = "3d/extract/scene";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (multifileprefix != null) localVarQueryParams.Add("multifileprefix", Configuration.ApiClient.ParameterToString(multifileprefix)); // query parameter
            if (newformat != null) localVarQueryParams.Add("newformat", Configuration.ApiClient.ParameterToString(newformat)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSceneToFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Triangulate whole file and save to the different file 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="newfilename">The new file&#39;s mame</param>
        /// <param name="newformat">The new file&#39;s format</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostTriangulateNew (string name, string newfilename, string newformat, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PostTriangulateNewWithHttpInfo(name, newfilename, newformat, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Triangulate whole file and save to the different file 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="newfilename">The new file&#39;s mame</param>
        /// <param name="newformat">The new file&#39;s format</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PostTriangulateNewWithHttpInfo (string name, string newfilename, string newformat, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostTriangulateNew");
            // verify the required parameter 'newfilename' is set
            if (newfilename == null)
                throw new ApiException(400, "Missing required parameter 'newfilename' when calling ThreeDCloudApi->PostTriangulateNew");
            // verify the required parameter 'newformat' is set
            if (newformat == null)
                throw new ApiException(400, "Missing required parameter 'newformat' when calling ThreeDCloudApi->PostTriangulateNew");

            var localVarPath = "3d/triangulate/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (newformat != null) localVarQueryParams.Add("newformat", Configuration.ApiClient.ParameterToString(newformat)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTriangulateNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Triangulate whole file and save to the different file 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="newfilename">The new file&#39;s mame</param>
        /// <param name="newformat">The new file&#39;s format</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostTriangulateNewAsync (string name, string newfilename, string newformat, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostTriangulateNewAsyncWithHttpInfo(name, newfilename, newformat, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Triangulate whole file and save to the different file 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="newfilename">The new file&#39;s mame</param>
        /// <param name="newformat">The new file&#39;s format</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostTriangulateNewAsyncWithHttpInfo (string name, string newfilename, string newformat, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostTriangulateNew");
            // verify the required parameter 'newfilename' is set
            if (newfilename == null)
                throw new ApiException(400, "Missing required parameter 'newfilename' when calling ThreeDCloudApi->PostTriangulateNew");
            // verify the required parameter 'newformat' is set
            if (newformat == null)
                throw new ApiException(400, "Missing required parameter 'newformat' when calling ThreeDCloudApi->PostTriangulateNew");

            var localVarPath = "3d/triangulate/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (newformat != null) localVarQueryParams.Add("newformat", Configuration.ApiClient.ParameterToString(newformat)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTriangulateNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Triangulate whole file and save to original file 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostTriangulateOriginal (string name, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PostTriangulateOriginalWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Triangulate whole file and save to original file 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PostTriangulateOriginalWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostTriangulateOriginal");

            var localVarPath = "3d/triangulate/original";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTriangulateOriginal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Triangulate whole file and save to original file 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostTriangulateOriginalAsync (string name, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostTriangulateOriginalAsyncWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Triangulate whole file and save to original file 
        /// </summary>
        /// <exception cref="Aspose.ThreeD.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The file&#39;s mame</param>
        /// <param name="folder">The folder for source file (optional)</param>
        /// <param name="storage">The storage type (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostTriangulateOriginalAsyncWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ThreeDCloudApi->PostTriangulateOriginal");

            var localVarPath = "3d/triangulate/original";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter

            // authentication (JWT) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTriangulateOriginal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

    }
}
