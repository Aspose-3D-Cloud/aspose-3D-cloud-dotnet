/* 
 * Aspose.ThreeD Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.ThreeD.Cloud.SDK.Client;
using Aspose.ThreeD.Cloud.SDK.Api;
using Aspose.ThreeD.Cloud.SDK.Model;

namespace Aspose.ThreeD.Cloud.SDK.Test
{
    /// <summary>
    ///  Class for testing FileApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FileApiTests : ThreeDBaseTest
    {
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test CopyFile
        /// </summary>
        [Test]
        public void CopyFileTest()
        {
            string srcPath = @"3DTest\Aspose.pdf";//"export.pdf";//
            string destPath = @"3DTest\Aspose.Net.pdf"; //"export.Net.pdf";//
            string srcStorageName = null;
            string destStorageName = null;
            string versionId = null;
            var response = fileApi.CopyFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Test DeleteFile
        /// </summary>
        [Test]
        public void DeleteFileTest()
        {
            string path = @"3DTest\Aspose3D.Net.pdf";
            string storageName = "First Storage";
            string versionId = null;
            var response = fileApi.DeleteFileWithHttpInfo(path, storageName, versionId);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Test DownloadFile
        /// </summary>
        [Test]
        public void DownloadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string path = @"3DTest\threeD2.pdf";
            string storageName = null;
            string versionId = null;
            var response = fileApi.DownloadFile(path, storageName, versionId);
            Assert.IsInstanceOf<System.IO.Stream>(response, "response is System.IO.Stream");
            string filename = @"E:\Cloud\src\csharp\testdata\threeD2.pdf";
            StreamToFile(response, filename);
        }

        /// <summary>
        /// Test MoveFile,the original file will be deleted
        /// </summary>
        [Test]
        public void MoveFileTest()
        {
            string srcPath = @"3DTest\threeD2.pdf";
            string destPath = @"3DTest\threeD.Move.pdf";
            string srcStorageName = null;
            string destStorageName = null;
            string versionId = null;
            var response = fileApi.MoveFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Upload File stream to server 
        /// </summary>
        [Test]
        public void UploadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string fileName = @"E:\Cloud\src\csharp\testdata\threeD.pdf";
            string path = @"3DTest\threeD2.pdf";
            System.IO.Stream file = null;
            string storageName = null;
            using (file = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.ReadWrite))
            {
                var response = fileApi.UploadFile(path, file, storageName);
                Assert.IsInstanceOf<FilesUploadResult>(response, "response is FilesUploadResult");
            }
        }

        public void StreamToFile(Stream stream, string fileName)
        {
            byte[] bytes = new byte[stream.Length];
            stream.Read(bytes, 0, bytes.Length);
            stream.Seek(0, SeekOrigin.Begin);
            FileStream fs = new FileStream(fileName, FileMode.Create);
            BinaryWriter bw = new BinaryWriter(fs);
            bw.Write(bytes);
            bw.Close();
            fs.Close();
        }

    }
}
