/* 
 * Aspose.ThreeD Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;
using System.IO;
using Aspose.ThreeD.Cloud.SDK.Model;
using Newtonsoft.Json;
using System.Collections.Generic;

namespace Aspose.ThreeD.Cloud.SDK.Test
{
    /// <summary>
    ///  Class for testing ThreeDCloudApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ThreeDCloudApiTests :ThreeDBaseTest
    {

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }
        /// <summary>
        /// Test CopyFile
        /// </summary>
        [Test]
        public void CopyFileTest()
        {
            string srcPath = @"3DTest\Aspose.pdf";//"export.pdf";//
            string destPath = @"3DTest\Aspose.Net.pdf"; //"export.Net.pdf";//
            string srcStorageName = null;
            string destStorageName = null;
            string versionId = null;
            var response = threeDCloudApi.CopyFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Test DeleteFile
        /// </summary>
        [Test]
        public void DeleteFileTest()
        {
            string path = @"3DTest\Aspose3D.Net.pdf";
            string storageName = "First Storage";
            string versionId = null;
            var response = threeDCloudApi.DeleteFileWithHttpInfo(path, storageName, versionId);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Test DownloadFile
        /// </summary>
        [Test]
        public void DownloadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string path = @"3DTest\Aspose.pdf";
            string storageName = null;
            string versionId = null;
            var response = threeDCloudApi.DownloadFile(path, storageName, versionId);
            Assert.IsInstanceOf<System.IO.Stream>(response, "response is System.IO.Stream");
            string filename = @"E:\Cloud\src\csharp\testdata\threeD2.pdf";
            StreamToFile(response, filename);
        }

        /// <summary>
        /// Test MoveFile,the original file will be deleted
        /// </summary>
        [Test]
        public void MoveFileTest()
        {
            string srcPath = @"3DTest\threeD2.pdf";
            string destPath = @"3DTest\threeD.Move.pdf";
            string srcStorageName = null;
            string destStorageName = null;
            string versionId = null;
            var response = threeDCloudApi.MoveFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Upload File stream to server 
        /// </summary>
        [Test]
        public void UploadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string fileName = @"E:\Cloud\src\csharp\testdata\src2";//threeD.pdf
            string path = @"3DTest";
            System.IO.Stream file = null;
            string storageName = null;
            using (file = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.ReadWrite))
            {
                var response = threeDCloudApi.UploadFile(path, file, storageName);
                Assert.IsInstanceOf<FilesUploadResult>(response, "response is FilesUploadResult");
            }
        }

        public void StreamToFile(Stream stream, string fileName)
        {
            byte[] bytes = new byte[stream.Length];
            stream.Read(bytes, 0, bytes.Length);
            stream.Seek(0, SeekOrigin.Begin);
            FileStream fs = new FileStream(fileName, FileMode.Create);
            BinaryWriter bw = new BinaryWriter(fs);
            bw.Write(bytes);
            bw.Close();
            fs.Close();
        }


        /// <summary>
        /// Copy the folder and the files in which to the dest 
        /// </summary>
        [Test]
        public void CopyFolderTest()
        {
            string srcPath = "3DTest";
            string destPath = "3DTestCOPY";
            string srcStorageName = null;
            string destStorageName = null;
            var response = threeDCloudApi.CopyFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Create a new folder,if the folder is exsits,it will rerurn ok.
        /// </summary>
        [Test]
        public void CreateFolderTest()
        {
            string path = "3DTestCreateNew";
            string storageName = null;
            //folderApi.CreateFolder(path, storageName);
            var response = threeDCloudApi.CreateFolderWithHttpInfo(path, storageName);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Delete Folder, if the folder is not empty,it will rerurn error.
        /// if the folder is not exsits which will still return the proper status code
        /// </summary>
        [Test]
        public void DeleteFolderTest()
        {
            string path = "3DTestCreateNew";
            string storageName = null;
            //folderApi.CreateFolder(path, storageName);
            var response = threeDCloudApi.DeleteFolderWithHttpInfo(path, storageName);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Get the files list in the specified folder,if the folder is not exsits still return the proper status code
        /// </summary>
        [Test]
        public void GetFilesListTest()
        {
            string path = "3DTestCOPY";
            string storageName = null;
            var response = threeDCloudApi.GetFilesList(path, storageName);
            Assert.IsInstanceOf<FilesList>(response, "response is FilesList");
        }

        /// <summary>
        /// Move all the files in srcPath to the destPath folder, and delete the srcPath folder
        /// if the source folder is not exsits,the result still return the proper status code 
        /// </summary>
        [Test]
        public void MoveFolderTest()
        {
            string srcPath = "3DTestCOPY";
            string destPath = "3DTestDest";
            string srcStorageName = null;
            string destStorageName = null;
            var response = threeDCloudApi.MoveFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
            Assert.AreEqual(response.StatusCode, 200);
        }
        [Test]
        public void GetDiscUsageTest()
        {
            string storageName = "First Storage";
            var response = threeDCloudApi.GetDiscUsage(storageName);
            Assert.IsInstanceOf<DiscUsage>(response, "response is DiscUsage");
        }

        /// <summary>
        ///  Check wether the specified file or folder is FileVersions
        /// </summary>
        [Test]
        public void GetFileVersionsTest()
        {
            string path = @"3DTest\Aspose.pdf";
            string storageName = null;
            var response = threeDCloudApi.GetFileVersions(path, storageName);
            Assert.IsInstanceOf<FileVersions>(response, "response is FileVersions");
        }

        /// <summary>
        ///  Check wether the specified object is exists or not
        /// </summary>
        [Test]
        public void ObjectExistsTest()
        {
            string path = @"3DTest\Empty.pdf";
            string storageName = null;
            string versionId = null;
            var response = threeDCloudApi.ObjectExists(path, storageName, versionId);
            Assert.IsInstanceOf<ObjectExist>(response, "response is ObjectExists");
            Assert.True(response.Exists);
            Assert.False(response.IsFolder);
        }

        /// <summary>
        /// Check wether the specified storage is exists or not
        /// </summary>
        [Test]
        public void StorageExistsTest()
        {
            /* NOTE: here storageName can not be null*/
            string storageName = "First Storage";/*here can not be null*/
            var response = threeDCloudApi.StorageExists(storageName);
            Assert.IsInstanceOf<StorageExist>(response, "response is StorageExist");
            Assert.True(response.Exists);
        }
        /// <summary>
        /// Delete object from scene
        /// Delete nodes that has a Camera or Light attached, nodes are addressed by Object Addressing Path
        /// </summary>
        [Test]
        public void DeleteNodesTest()
        {
            const string name = "Aspose.pdf";
            const string objectaddressingpath = "//*[(@Type = 'Camera') or (@Name = 'light')]";
            const string folder = "3DTest";
            string storage = "First Storage";
            var response = threeDCloudApi.DeleteNodesWithHttpInfo(name, objectaddressingpath, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Convert whole file into different format with format parameter 
        /// </summary>
        [Test]
        public void PostConvertByFormatTest()
        {
            string name = "oaptest.fbx";
            string newformat = "pdf";
            string newfilename = "oaptest.pdf";
            string folder = "3DTest";
            bool isOverwrite = true;
            string storage = "First Storage";
            var response = threeDCloudApi.PostConvertByFormatWithHttpInfo(name, newformat, newfilename, folder, isOverwrite, storage);
			Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Convert whole file into different format with saveoption parameter 
        /// </summary>
        [Test]
        public void PostConvertByOptTest()
        {
            string name = "oaptest.pdf";
            PlySaveOption saveopt = new PlySaveOption();
            /* SaveFormat must be assigned*/
            saveopt.SaveFormat = SaveFormat.PLY;
            List<string> positionComponents = new List<string>();
            positionComponents.Add("x"); positionComponents.Add("y"); positionComponents.Add("z");
            saveopt.PositionComponents = positionComponents;
            var json = JsonConvert.SerializeObject(saveopt); //for test
            string newfilename = "saveasOptS.pdf"; ;
            string folder = "3DTest";
            bool  isOverwrite = true;
            string storage = "First Storage";
            var response = threeDCloudApi.PostConvertByOptWithHttpInfo(name, saveopt, newfilename, folder, isOverwrite, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Convert part of the file into different format
        /// </summary>
        [Test]
        public void PostSaveAsPartTest()
        {
            const string name = "parttest.fbx";
            string objectaddressingpath = "a1";
            const string newformat = "pdf";
            const string newfilename = "saveaspart.pdf";
            const string folder = "3DTest"; ;
            bool IsOverwrite = true;
            string storage = null;
            var response = threeDCloudApi.PostSaveAsPartWithHttpInfo(name, objectaddressingpath, newformat, newfilename, folder, IsOverwrite, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Create a stream with specific format
        /// </summary>
        [Test]
        public void PostCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string format = "pdf";
            var response = threeDCloudApi.PostCreate(format);
            Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");			
        }

        /// <summary>
        /// Parametric Modeling
        /// Create specific entity and save to the original file
        /// </summary>
        [Test]
        public void PostModelTest()
        {
            const string name = @"3DTest\Aspose.pdf";
            const string folder = "";
            const string newformat = "pdf";
            const string storage = null;
            ModelData modeldata = new ModelData();
            modeldata.Type = "Node";///can be deleted**
            modeldata.Transform = new Transform();
            modeldata.Transform.Translation = new Vector3();
            modeldata.Transform.Translation.X = 100;
            modeldata.Transform.Translation.Y = 100;
            modeldata.Transform.Translation.Z = 100;
            //modeldata.Transform.Translation.Length2 = 0;
            //modeldata.Transform.Translation.Length = 0;
            modeldata.Entity = new Entity();
            //modeldata.Entity.Type = "cylinder";///can be deleted
            modeldata.Entity.Torus = new Torus();
            modeldata.Entity.Torus.Radius = 10;
            modeldata.Entity.Torus.Tube = 20;
            modeldata.Entity.Torus.RadialSegments = 10;
            modeldata.Entity.Torus.TubularSegments = 10;          
            var json = JsonConvert.SerializeObject(modeldata); //for test
            var response = threeDCloudApi.PostModelWithHttpInfo(name, modeldata, newformat, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        ///  Extract raw data(without any modification) from a password protected PDF file
        /// </summary>
        [Test]
        public void PostPdfRawDataTest()
        {
            const string name = "extracttest.pdf";
            const string multifileprefix = "rawdata";
            const string password = "";
            const string folder = "3DTest";
            const string storage = null;
            var response = threeDCloudApi.PostPdfRawDataWithHttpInfo(name, multifileprefix, password, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Extract and save in different format
        /// </summary>
        [Test]
        public void PostSceneToFileTest()
        {
            const string name = "extracttest.pdf";
            const string multifileprefix = "newScene";
            const string newformat = "pdf";
            const string password = null;
            const string folder = "3DTest";
            string storage = null;
            var response = threeDCloudApi.PostSceneToFileWithHttpInfo(name, multifileprefix, newformat, password, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Triangulate whole file and save to different file
        /// </summary>
        [Test]
        public void PostTriangulateNewTest()
        {
            const string name = "triangulate.3ds";
            const string newfilename = "triangulateNew";
            const string newformat = "pdf";
            const string folder = "3DTest";
            string storage = null;
            var response = threeDCloudApi.PostTriangulateNewWithHttpInfo(name, newfilename, newformat, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Triangulate whole file and save to original file
        /// </summary>
        [Test]
        public void PostTriangulateOriginalTest()
        {
            const string name = "triangulate.3ds";
            const string folder = "3DTest";
            string storage = null;
            var response = threeDCloudApi.PostTriangulateOriginalWithHttpInfo(name, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }
    }

}
