/* 
 * Aspose.ThreeD Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;
using Aspose.ThreeD.Cloud.SDK.Api;
using Aspose.ThreeD.Cloud.SDK.Model;
using Newtonsoft.Json;
using System.Collections.Generic;

namespace Aspose.ThreeD.Cloud.SDK.Test
{
    /// <summary>
    ///  Class for testing ThreeDCloudApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ThreeDCloudApiTests :ThreeDBaseTest
    {

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Delete object from scene
        /// Delete nodes that has a Camera or Light attached, nodes are addressed by Object Addressing Path
        /// </summary>
        [Test]
        public void DeleteNodesTest()
        {
            const string name = "oaptest.pdf";
            const string objectaddressingpath = "//*[(@Type = 'Camera') or (@Name = 'light')]";
            const string folder = "3DTest";
            string storage = "First Storage";
            var response = threeDCloudApi.DeleteNodesWithHttpInfo(name, objectaddressingpath, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Convert whole file into different format with format parameter 
        /// </summary>
        [Test]
        public void PostConvertByFormatTest()
        {
            string name = "oaptest.fbx";
            string newformat = "pdf";
            string newfilename = "oaptest.pdf";
            string folder = "3DTest";
            bool isOverwrite = true;
            string storage = "First Storage";
            var response = threeDCloudApi.PostConvertByFormatWithHttpInfo(name, newformat, newfilename, folder, isOverwrite, storage);
			Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Convert whole file into different format with saveoption parameter 
        /// </summary>
        [Test]
        public void PostConvertByOptTest()
        {
            string name = "oaptest.pdf";
            PlySaveOption saveopt = new PlySaveOption();
            /* SaveFormat must be assigned*/
            saveopt.SaveFormat = SaveFormat.PLY;
            saveopt.FileSystem = new FileSystem();
            saveopt.FileSystem.FileSystemType = FileSystemType.MemoryFileSystem;
            List<string> positionComponents = new List<string>();
            positionComponents.Add("x"); positionComponents.Add("y"); positionComponents.Add("z");
            saveopt.PositionComponents = positionComponents;
            var json = JsonConvert.SerializeObject(saveopt); //for test
            string newfilename = "saveasOptS.pdf"; ;
            string folder = "3DTest";
            bool  isOverwrite = true;
            string storage = "First Storage";
            var response = threeDCloudApi.PostConvertByOptWithHttpInfo(name, saveopt, newfilename, folder, isOverwrite, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Convert part of the file into different format
        /// </summary>
        [Test]
        public void PostSaveAsPartTest()
        {
            const string name = "parttest.fbx";
            string objectaddressingpath = "a1";
            const string newformat = "pdf";
            const string newfilename = "saveaspart.pdf";
            const string folder = "3DTest"; ;
            bool IsOverwrite = true;
            string storage = null;
            var response = threeDCloudApi.PostSaveAsPartWithHttpInfo(name, objectaddressingpath, newformat, newfilename, folder, IsOverwrite, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Create a stream with specific format
        /// </summary>
        [Test]
        public void PostCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string format = "pdf";
            var response = threeDCloudApi.PostCreate(format);
            Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");			
        }

        /// <summary>
        /// Parametric Modeling
        /// Create specific entity and save to the original file
        /// </summary>
        [Test]
        public void PostModelTest()
        {
            const string name = @"3DTest\Aspose.pdf";
            const string folder = "";
            const string newformat = "pdf";
            const string storage = null;
            ModelData modeldata = new ModelData();
            modeldata.Type = "Node";///can be deleted**
            modeldata.Transform = new Transform();
            modeldata.Transform.Translation = new Vector3();
            modeldata.Transform.Translation.X = 100;
            modeldata.Transform.Translation.Y = 100;
            modeldata.Transform.Translation.Z = 100;
            //modeldata.Transform.Translation.Length2 = 0;
            //modeldata.Transform.Translation.Length = 0;
            modeldata.Entity = new Entity();
            //modeldata.Entity.Type = "cylinder";///can be deleted
            modeldata.Entity.Torus = new Torus();
            modeldata.Entity.Torus.Radius = 10;
            modeldata.Entity.Torus.Tube = 20;
            modeldata.Entity.Torus.RadialSegments = 10;
            modeldata.Entity.Torus.TubularSegments = 10;          
            var json = JsonConvert.SerializeObject(modeldata); //for test
            var response = threeDCloudApi.PostModelWithHttpInfo(name, modeldata, newformat, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        ///  Extract raw data(without any modification) from a password protected PDF file
        /// </summary>
        [Test]
        public void PostPdfRawDataTest()
        {
            const string name = "extracttest.pdf";
            const string multifileprefix = "rawdata";
            const string password = "";
            const string folder = "3DTest";
            const string storage = null;
            var response = threeDCloudApi.PostPdfRawDataWithHttpInfo(name, multifileprefix, password, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Extract and save in different format
        /// </summary>
        [Test]
        public void PostSceneToFileTest()
        {
            const string name = "extracttest.pdf";
            const string multifileprefix = "newScene";
            const string newformat = "pdf";
            const string password = null;
            const string folder = "3DTest";
            string storage = null;
            var response = threeDCloudApi.PostSceneToFileWithHttpInfo(name, multifileprefix, newformat, password, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Triangulate whole file and save to different file
        /// </summary>
        [Test]
        public void PostTriangulateNewTest()
        {
            const string name = "triangulate.3ds";
            const string newfilename = "triangulateNew";
            const string newformat = "pdf";
            const string folder = "3DTest";
            string storage = null;
            var response = threeDCloudApi.PostTriangulateNewWithHttpInfo(name, newfilename, newformat, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }

        /// <summary>
        /// Triangulate whole file and save to original file
        /// </summary>
        [Test]
        public void PostTriangulateOriginalTest()
        {
            const string name = "triangulate.3ds";
            const string folder = "3DTest";
            string storage = null;
            var response = threeDCloudApi.PostTriangulateOriginalWithHttpInfo(name, folder, storage);
            Assert.AreEqual(response.StatusCode, 200);
        }
    }

}
